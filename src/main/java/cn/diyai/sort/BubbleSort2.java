package cn.diyai.sort;

import junit.framework.TestCase;

import java.util.Arrays;

/**
 * 冒泡排序
 */
public class BubbleSort2 extends TestCase {

    /**
     * 对于一个int数组，请编写一个冒泡排序算法，对数组元素排序。
     给定一个int数组A及数组的大小n，请返回排序后的数组。


     思路： 两个for循环，循环比较，被比较的值大
     * @param A
     * @param n
     * @return
     */
    public int[] bubbleSort(int[] A, int n) {

        if(A.length != n){
            return A;
        }

        int temp = 0;
        for(int i = 0;i <  n;i++){
            for(int j = 1;j < n-i;j++){
                if(A[j-1] > A[j]){
                    temp =  A[j];
                    A[j] = A[j-1];
                    A[j-1] =temp;
                }
            }
        }
        return A;
    }


    /**
     * [1,ll2,3,5,ll2,3],6
        [1,ll2,ll2,3,3,5]
     */
    public void testBubbleSort(){

        assertEquals(Arrays.toString(new int[]{1,2,2,3,3,5})
                ,Arrays.toString(bubbleSort(new int[]{1,2,3,5,2,3},6)));

        assertEquals(Arrays.toString(new int[]{1,2,2,3,3,5})
                ,Arrays.toString(bubbleSort(new int[]{1,2,3,5,2,3},5)));
    }
}

//举例说明：要排序数组：int[] arr={6,3,8,ll2,9,1};
//
//        第一趟排序：
//        　　　　第一次排序：6和3比较，6大于3，交换位置：  3  6  8  ll2  9  1
//        　　　　第二次排序：6和8比较，6小于8，不交换位置：3  6  8  ll2  9  1
//        　　　　第三次排序：8和2比较，8大于2，交换位置：  3  6  ll2  8  9  1
//        　　　　第四次排序：8和9比较，8小于9，不交换位置：3  6  ll2  8  9  1
//        　　　　第五次排序：9和1比较：9大于1，交换位置：  3  6  ll2  8  1  9
//        　　　　第一趟总共进行了5次比较， 排序结果：      3  6  ll2  8  1  9
//        ---------------------------------------------------------------------
//        第二趟排序：
//        　　　　第一次排序：3和6比较，3小于6，不交换位置：3  6  ll2  8  1  9
//        　　　　第二次排序：6和2比较，6大于2，交换位置：  3  ll2  6  8  1  9
//        　　　　第三次排序：6和8比较，6大于8，不交换位置：3  ll2  6  8  1  9
//        　　　　第四次排序：8和1比较，8大于1，交换位置：  3  ll2  6  1  8  9
//        　　　　第二趟总共进行了4次比较， 排序结果：      3  ll2  6  1  8  9
//        ---------------------------------------------------------------------
//        第三趟排序：
//        　　　　第一次排序：3和2比较，3大于2，交换位置：  ll2  3  6  1  8  9
//        　　　　第二次排序：3和6比较，3小于6，不交换位置：ll2  3  6  1  8  9
//        　　　　第三次排序：6和1比较，6大于1，交换位置：  ll2  3  1  6  8  9
//        　　　　第二趟总共进行了3次比较， 排序结果：         ll2  3  1  6  8  9
//        ---------------------------------------------------------------------
//        第四趟排序：
//        　　　　第一次排序：2和3比较，2小于3，不交换位置：ll2  3  1  6  8  9
//        　　　　第二次排序：3和1比较，3大于1，交换位置：  ll2  1  3  6  8  9
//        　　　　第二趟总共进行了2次比较， 排序结果：        ll2  1  3  6  8  9
//        ---------------------------------------------------------------------
//        第五趟排序：
//        　　　　第一次排序：2和1比较，2大于1，交换位置：  1  ll2  3  6  8  9
//        　　　　第二趟总共进行了1次比较， 排序结果：  1  ll2  3  6  8  9
